package com.javarush.task.task20.task2025;


import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.TreeSet;

/*
Алгоритмы-числа
*/
public class Solution {
    private static long[] longPow2 = new long[19];
    private static long[] longPow3 = new long[19];
    private static long[] longPow4 = new long[19];
    private static long[] longPow5 = new long[19];
    private static long[] longPow6 = new long[19];
    private static long[] longPow7 = new long[19];
    private static long[] longPow8 = new long[19];
    private static long[] longPow9 = new long[19];
    private static long[] longPow10 = new long[19];

    static {
        long i2 = 4, i3 = 9, i4 = 16, i5 = 25, i6 = 36, i7 = 49, i8 = 64, i9 = 81, i10 = 100;
        for (int i = 0; i < 19; i++){
            longPow2[i] = i2;
            i2 *= 2;
            longPow3[i] = i3;
            i3 *= 3;
            longPow4[i] = i4;
            i4 *= 4;
            longPow5[i] = i5;
            i5 *= 5;
            longPow6[i] = i6;
            i6 *= 6;
            longPow7[i] = i7;
            i7 *= 7;
            longPow8[i] = i8;
            i8 *= 8;
            longPow9[i] = i9;
            i9 *= 9;
            longPow10[i] = i10;
            i10 *= 10;
        }
    }

    private static long getLongPow ( int digit, int pow){
        if (digit == 0) return 0;
        if (digit == 1) return 1;
        if (pow == 0) return 1;
        if (pow == 1) return digit;
        if (pow < 0 || pow > 20) return 0;
        switch (digit){
            case 2: return longPow2[pow - 2];
            case 3: return longPow3[pow - 2];
            case 4: return longPow4[pow - 2];
            case 5: return longPow5[pow - 2];
            case 6: return longPow6[pow - 2];
            case 7: return longPow7[pow - 2];
            case 8: return longPow8[pow - 2];
            case 9: return longPow9[pow - 2];
            case 10: return longPow10[pow - 2];
            default: return 0;
        }
    }

    private static Map<Integer,Integer> getDigits(long number){
        Map<Integer, Integer> map = new HashMap<>();
        long base10 = 10;
        long base10m = 1;
        do {
            int digit = (int) ((number%base10)/base10m);
            if (map.containsKey(digit))
            {
                map.put(digit, map.get(digit)+ 1);
            } else {
                map.put(digit, 1);
            }
            base10 *= 10;
            base10m *= 10;

        } while (number / base10m > 0);
        for(int i = 1; i < 10; i++)
            if (!map.containsKey(i)) map.put(i,0);

        return map;
    }

    private static TreeSet<Long> getArmstrongN (int N){
        TreeSet<Long> set = new TreeSet<>();
        if (N == 1){
            for(int i = 0; i < 10; i++) set.add(i*1L);
            return set;
        }
        if (N == 2) return set;
        Map<Integer, Integer> mapDigits = new TreeMap<>();

        int maxDigitCount = 0;
        long digitsPowSum = 0;
        int currentDigit = 9;

        while (currentDigit > 0) {
            for (int i = 0; i < N; i++){
                if (digitsPowSum + getLongPow(currentDigit,N) < longPow10[N-2]) {
                    digitsPowSum += getLongPow(currentDigit, N);
                    maxDigitCount = i+1;
                }
                else break;
            }
            if (digitsPowSum > longPow10[N-3]) {
                mapDigits.put(currentDigit, maxDigitCount);
                currentDigit--;
                digitsPowSum = 0;
            } else break;
        }
        for(int i = 1; i < 10; i++){
            if(!mapDigits.containsKey(i)) mapDigits.put(i, N);
        }
        for (int i9 = 0; i9 <= mapDigits.get(9); i9++){
            for (int i8 = 0; i8 <= mapDigits.get(8)-i9; i8++){
                if ( getLongPow(10,N-1) - i9*getLongPow(9,N) - i8*getLongPow(8,N)  < mapDigits.get(7)*getLongPow(7,N))
                for (int i7 = 0; i7 <= mapDigits.get(7) - i8; i7++){
                    for (int i6 = 0; i6 <= mapDigits.get(6) - i7; i6++){
                        if ( getLongPow(10,N-1) - i9*getLongPow(9,N) - i8*getLongPow(8,N) - i7*getLongPow(7,N) - i6*getLongPow(6,N)< mapDigits.get(5)*getLongPow(5,N))
                        for (int i5 = 0; i5 <= mapDigits.get(5) - i6; i5++){
                            for (int i4 = 0; i4 <= mapDigits.get(4) - i5; i4++){
                                for (int i3 = 0; i3 <= mapDigits.get(3) - i4; i3++){
                                    for (int i2 = 0; i2 <= mapDigits.get(2) - i3; i2++){
                                        for (int i1 = 0; i1 <= mapDigits.get(1) - i2; i1++){
                                            long sum = i1 + i2*getLongPow(2,N)+i3*getLongPow(3,N)+i4*getLongPow(4,N)
                                                    + i5*getLongPow(5,N) + i6*getLongPow(6,N) + i7*getLongPow(7,N)
                                                    + i8*getLongPow(8, N) + i9*getLongPow(9,N);
                                            Map<Integer, Integer> map = getDigits(sum);
                                            Boolean isArmstrong =true;
                                            if (sum < getLongPow(10, N-1)) isArmstrong = false;
                                            else if (map.get(1) != i1) isArmstrong = false;
                                            else if (map.get(2) != i2) isArmstrong = false;
                                            else if (map.get(3) != i3) isArmstrong = false;
                                            else if (map.get(4) != i4) isArmstrong = false;
                                            else if (map.get(5) != i5) isArmstrong = false;
                                            else if (map.get(6) != i6) isArmstrong = false;
                                            else if (map.get(7) != i7) isArmstrong = false;
                                            else    if (map.get(8) != i8) isArmstrong = false;
                                            else if (map.get(9) != i9) isArmstrong = false;
                                            if (isArmstrong) set.add(sum);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return set;
    }



    public static long[] getNumbers(long N) {
        TreeSet<Long> setResult = new TreeSet<>();
        int base10 = 10;
        int digitsCount = 1;
        while (N / base10 > 0){
            digitsCount++;
            base10 *=10;
        }
        for (int i = 1; i <= digitsCount; i++){
            setResult.addAll(getArmstrongN(i));
        }

        for (Long l: setResult)
        {
            if (l > N ) setResult.remove(l);
        }
        long[] result = new long[setResult.size()];
        int j = 0;
        for (Long l : setResult){
            result[j] = l;
            j++;
        }

        return result;
    }

    public static void main(String[] args) {

        long[] res = getNumbers(999999999999999999L);

        for (int i = 0; i < res.length; i++)
        System.out.println(res[i]);

    }
}
